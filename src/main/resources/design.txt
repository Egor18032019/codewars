Разработайте свою реализацию связанного списка.
 Вы можете использовать односвязный или двусвязный список.
Узел в односвязном списке должен иметь два атрибута: val и next. val — это значение текущего узла,
 а next — указатель/ссылка на следующий узел.
Если вы хотите использовать двусвязный список,
вам понадобится еще один атрибут prev для указания предыдущего узла в связанном списке.
Предположим, что все узлы в связанном списке имеют нулевой индекс.

Реализуйте класс MyLinkedList:

MyLinkedList() Инициализирует объект MyLinkedList.
int get(int index) Получить значение индексного узла в связанном списке.
Если индекс недействителен, вернуть -1.
void addAtHead(int val) Добавляет узел со значением val перед первым элементом связанного списка.
После вставки новый узел будет первым узлом связанного списка.
void addAtTail(int val) Добавляет узел со значением val в качестве последнего элемента связанного списка.
void addAtIndex(int ​​index, int val) Добавить узел со значением val перед индексным узлом в связанном списке.
 Если индекс равен длине связанного списка, узел будет добавлен в конец связанного списка.
  Если индекс больше длины, узел не будет вставлен.
void deleteAtIndex(int ​​index) Удалить индексный узел в связанном списке, если индекс действителен.

public class MyLinkedList {
    class Node {
        int val;
        Node next;

        public Node(int val, Node next) {
            this.val = val;
            this.next = next;
        }
    }

    private Node head = null;
    private Node tail = null;
    private int maxIndex = -1; // последний узел
    public MyLinkedList() {

    }